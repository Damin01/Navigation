import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from scipy import signal

# extracting data from Navigation.py
xx = np.array([-2472629.52314719, -2472629.58307596, -2472629.64830208, -2472629.70132734, -2472629.7306508,  -2472629.77932954,
                -2472629.82520764, -2472629.85629593, -2472629.87360059, -2472629.8779157,  -2472629.87202563, -2472629.86562143,
                -2472629.85375564, -2472629.85000966, -2472629.86777519, -2472629.88522347, -2472629.93783371, -2472630.00679471,
                -2472630.12080812, -2472630.26212676, -2472630.44211451, -2472630.67219167, -2472630.96142032, -2472631.29642595,
                -2472631.69854103, -2472632.17620345, -2472632.71606638, -2472633.35519215, -2472634.10003944, -2472634.95826562,
                -2472635.92509017, -2472637.01539946, -2472638.2314142,  -2472639.5760577,  -2472641.01087261, -2472642.52339655,
                -2472644.12122218, -2472645.81376192, -2472647.6333022,  -2472649.58713958, -2472651.60922099, -2472653.73863617,
                -2472655.97943037, -2472658.29208409, -2472660.68418104, -2472663.13612173, -2472665.64323886, -2472668.1980373,
                -2472670.79455768, -2472673.44344589, -2472676.15089404, -2472678.92798202, -2472681.78059511, -2472684.7340326,
                -2472687.73691824, -2472690.78659196, -2472693.88642887])
yy = np.array([-4681905.34096134, -4681905.1864417,  -4681904.96200593, -4681904.66020714, -4681904.27891236, -4681903.81867873,
                -4681903.29213185, -4681902.7053747, -4681902.06193279, -4681901.33870402, -4681900.53516482, -4681899.66660919,
                -4681898.7234487,  -4681897.69491985, -4681896.58125597, -4681895.38812822, -4681894.10852719, -4681892.7582927,
                -4681891.33977154, -4681889.8545353, -4681888.29911523, -4681886.67572991, -4681884.99039968, -4681883.23356949,
                -4681881.40731629, -4681879.51514535, -4681877.54762022, -4681875.50321752, -4681873.39142599, -4681871.22760368,
                -4681868.98084958, -4681866.70272313, -4681864.40540053, -4681862.09940685, -4681859.77214834, -4681857.33371692,
                -4681854.7964101,  -4681852.16605572, -4681849.44115475, -4681846.6314476, -4681843.73146359, -4681840.77755738,
                -4681837.76122187, -4681834.69021473, -4681831.58284364, -4681828.4170224,  -4681825.19638009, -4681821.89764359,
                -4681818.51370003, -4681815.05536898, -4681811.53098049, -4681807.95547842, -4681804.3335746,  -4681800.6490271,
                -4681796.89465091, -4681793.07179618, -4681789.17744993])
zz = np.array([3523558.49364838, 3523558.33059493, 3523558.0685009,  3523557.7083032, 3523557.25114117, 3523556.70992382,
               3523556.06884179, 3523555.31353205, 3523554.43122663, 3523553.4208724,  3523552.29777168, 3523551.06492882,
               3523549.73964933, 3523548.30969546, 3523546.7853824,  3523545.15920805, 3523543.4505412,  3523541.65400439,
               3523539.78000588, 3523537.82819528, 3523535.7972174,  3523533.6897533,  3523531.52082672, 3523529.28626279,
               3523527.0048897,  3523524.67550974, 3523522.26776896, 3523519.77301285, 3523517.19663229, 3523514.54016954,
               3523511.83922737, 3523509.06188189, 3523506.20624118, 3523503.26906039, 3523500.21394793, 3523497.1356244,
               3523494.03097047, 3523490.89311794, 3523487.71327359, 3523484.4957211, 3523481.19118925, 3523477.81925527,
               3523474.3980792,  3523470.91319051, 3523467.36057002, 3523463.728748,   3523460.00555357, 3523456.20069623,
               3523452.31944387, 3523448.36059732, 3523444.34529898, 3523440.28007857, 3523436.17709901, 3523432.00537547,
               3523427.75771183, 3523423.43956653, 3523419.04544215])
vxx = np.array([-0.86302155, -1.80783123, -1.96763274, -1.59957775, -0.88458134, -1.46845908, -1.38397408, -0.93781986,
                -0.52201802, -0.1301711, 0.1776817, 0.19319133, 0.3579475, 0.1130023, -0.53592098, -0.52635043, -1.58705805,
                -2.08030054, -3.43936669, -4.26306536, -5.42957049, -6.94058453, -8.72496817, -10.10589185, -12.13033768,
                -14.40932417, -16.2856854, -19.2800815, -22.46931213, -25.88953783, -29.1655522, -32.89063436, -36.68270684,
                -40.562965, -43.28310581, -45.62730257, -48.20054164, -51.05771924, -54.88885988, -58.94011121, -60.99878334,
                -64.23664944, -67.59654644, -69.76428474, -72.16079564, -73.96606187, -75.63053294, -77.06890314, -78.32750123,
                -79.90724676, -81.67378513, -83.7745637, -86.05287962, -89.09438192, -90.58605128, -91.99747614, -93.51071579])
vyy = np.array([2.30978424, 4.66129099, 6.77040439, 9.10416314, 11.50226573, 13.88356146, 15.88398905, 17.70031241, 19.4102835,
                21.81716058, 24.23983205, 26.20113934, 28.45169437, 31.02694482, 33.5951566, 35.99229031, 38.60087218,
                40.73162466, 42.79158307, 44.80413263, 46.92132157, 48.97158359, 50.84023496, 52.99712625, 55.09136425,
                57.07986056, 59.35302021, 61.67213476, 63.7050088, 65.27458672, 67.77633463, 68.72272367, 69.30180104,
                69.56337562, 70.20485766, 73.55853685, 76.54124491, 79.34814887, 82.2002732, 84.75856449, 87.48188616,
                89.10852154, 90.99178486, 92.64102719, 93.73799437, 95.50122092, 97.15497186, 99.51078727, 102.08117192,
                104.32516972, 106.3178803, 107.85979005, 109.25956042, 111.14929079, 113.25576652, 115.32151275, 117.47814984])
vzz = np.array([-2.50797114, -4.9187248, -7.90641605, -10.86584433, -13.79090233, -16.32654358, -19.33909466, -22.78492574,
                -26.61592003, -30.47868343, -33.87983151, -37.19034943, -39.97882379, -43.13646623, -45.98293677, -49.05571877,
                -51.54421501, -54.19492969, -56.53166509, -58.87897033, -61.26715736, -63.57446603, -65.42856374, -67.4086021,
                -68.82066264, -70.26885388, -72.63271283, -75.25764616, -77.71995651, -80.13574282, -81.4775239, -83.78233135,
                -86.14421182, -88.60397689, -92.16154292, -92.86173593, -93.65602775, -94.65750752, -95.92424699, -97.06176303,
                -99.6856118, -101.71888689, -103.20434011, -105.12631641, -107.16953654, -109.55875634, -112.31512686,
                -114.77859745, -117.08315542, -119.42388738, -121.1268311, -122.63279678, -123.77185225, -125.84560593,
                -128.13644032, -130.26261357, -132.55462392])
axx = np.array([-26.03419642, -28.5014445, -4.82062552, 11.10286982, 21.56882053, -17.61345104, 2.5486028, 13.45883724,
                12.54321722, 11.82058482, 9.28679042, 0.4678687, 4.97008991, -7.38909878, -19.5756365, 0.28870825, -31.99766037,
                -14.87931757, -40.99804355, -24.84796918, -35.18918339, -45.5817544, -53.8283129, -41.65740495, -61.07010927,
                -68.74866779, -56.60293977, -90.32995289, -96.20739658, -103.17567105, -98.82534403, -112.37207273, -114.39292521,
                -117.05316388, -82.05667641, -70.71582257, -77.62518919, -86.19057412, -115.57146837, -122.21140091, -62.10259125,
                -97.67455034, -101.35577517, -65.3927179, -72.29394817, -54.45826424, -50.2109902, -43.39035603, -37.96729035,
                -47.65513139, -53.28998686, -63.37278796, -68.72843929, -91.75097426, -44.99819626, -42.5775139, -45.64889257])
ayy = np.array([69.67772301, 70.93633822, 63.62421917, 70.40094624, 72.34196386, 71.8349623, 60.34556701, 54.79181738,
                51.58355902, 72.60665809, 73.08311668, 59.1654509, 67.89099509, 77.68586513, 77.47353448, 72.31273639,
                78.69135208, 64.27699122, 62.14139357, 60.71124215, 63.86782895, 61.84888895, 56.37036141, 65.06550331,
                63.17548286, 59.98564415, 68.57289318, 69.95918427, 61.32435761, 47.34841177, 75.46856303, 28.54908819,
                17.46864139, 7.89074614, 19.3511613, 101.16820679, 89.97736791, 84.67400228, 86.0381354, 77.1742696,
                82.15263149, 49.06962623, 56.81115042, 49.7515951, 33.0914783, 53.19008107, 49.88760347, 71.06631436,
                77.53908228, 67.69318696, 60.11277322, 46.51376456, 42.22594057, 57.00623759, 63.5446506, 62.31599093, 65.05783479])
azz = np.array([-75.65629513, -72.72360047, -90.12769202, -89.27510238, -88.23827661, -76.49100093, -90.87762246, -103.94809133,
                -115.56705349, -116.52541117, -102.60016923, -99.86618943, -84.11804914, -95.2544966, -85.86758102, -92.69456847,
                -75.06880891, -79.9623445, -70.49074063, -70.80959392, -72.04284786, -69.60304395, -55.93133089, -59.73049872,
                -42.59668996, -43.68662056, -71.30895904, -79.18461559, -74.27887655, -72.87541673, -40.47661641, -69.5275914,
                -71.24927536, -74.20209464, -107.31872529, -21.12225643, -23.9608722, -30.21097348, -38.21288601, -34.3146888,
                -79.15189841, -61.33645569, -44.8106781, -57.9789791, -61.63646104, -72.07400265, -83.14959379, -74.31387678,
                -69.52006566, -70.6113021, -51.37156924, -45.42946383, -34.36112758, -62.55754625, -69.1060756, -64.13885258, -69.14154995])
dt = 0.03314953676938015
N = len(xx)
# Generating covariance matrix, Q (covariance matrix of w_k
Q = np.zeros([9,9])
# Generating covariance matrix, R (covariance matrix for v_k
# Can be obtained from data sheet of sensor (here we will infer)
v = np.random.uniform(-1,1, size=(9,N))*np.sqrt(np.linalg.norm(10))
R = np.cov(v, bias=False)

# Generating F matrix
F = np.matrix([[1, 0, 0, dt, 0, 0, 0.5*pow(dt,2), 0, 0], [0, 1, 0, 0, dt, 0, 0, 0.5*pow(dt,2), 0],
               [0, 0, 1, 0, 0, dt, 0, 0, 0.5*pow(dt,2)], [0, 0, 0, 1, 0, 0, dt, 0, 0], [0, 0, 0, 0, 1, 0, 0, dt, 0],
               [0, 0, 0, 0, 0, 1, 0, 0, dt], [0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1]])
H = np.matrix([[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0],
               [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0],
               [0, 0, 0, 0, 0, 0, 0, 0, 1]])

# Since P will eventually converge, use whatever you want
P0 = 10 * np.identity(9)


P = P0
xhat = np.matrix([[xx[0]], [yy[0]], [zz[0]], [vxx[0]], [vyy[0]], [vzz[0]], [axx[0]], [ayy[0]], [azz[0]]])
yhistory = np.zeros((9,N-1))
xhathistory = np.zeros((9,N-1))
Phistory =np.zeros((9,N-1))

for i in range(N-1):
    x = np.matrix([[xx[i]], [yy[i]], [zz[i]], [vxx[i]], [vyy[i]], [vzz[i]], [axx[i]], [ayy[i]], [azz[i]]])
    y = np.matmul(H,x) + np.matrix([[v[0,i]], [v[1,i]], [v[2,i]], [v[3,i]], [v[4,i]], [v[5,i]], [v[6,i]], [v[7,i]], [v[8,i]]])
    # xhatkgivenk-1 for Kalman Filter
    xhatkgivenk = np.matmul(F,xhat)
    xhathistory[0,i] = xhatkgivenk[0]
    xhathistory[1, i] = xhatkgivenk[1]
    xhathistory[2, i] = xhatkgivenk[2]
    xhathistory[3, i] = xhatkgivenk[3]
    xhathistory[4, i] = xhatkgivenk[4]
    xhathistory[5, i] = xhatkgivenk[5]
    xhathistory[6, i] = xhatkgivenk[6]
    xhathistory[7, i] = xhatkgivenk[7]
    xhathistory[8, i] = xhatkgivenk[8]
    # K for Kalman Filter
    K = np.matmul(np.matmul(P,H), np.linalg.inv(np.matmul(H.transpose(),np.matmul(P,H)) + R))
    # Predicted Covariance for Kalman Filter
    P = np.matmul(F, np.matmul(P,F.transpose())) + Q
    # Update State Estimate for Kalman Filter
    xhat = xhat + np.matmul(K, (y - np.matmul(H.transpose(), xhat)))

fig, axs = plt.subplots(3, 3, figsize = (12, 8))

axs[0, 0].plot(axx, label = r'$a_{x}_{k}$')
axs[0, 0].plot(xhathistory[6, :],'--', label = '$\hat{a_{x}}$')
axs[0, 0].set_xlabel('time (s)')
axs[0, 0].set_ylabel(r'$a_{x}  \left ( \frac{m}{s^{2}} \right )$')
axs[0, 0].set_title('Acceleration vs. Time')
axs[0, 0].grid()

axs[0, 1].plot(ayy, label = r'$a_{y}_{k}$')
axs[0, 1].plot(xhathistory[7, :],'--', label = '$\hat{a_{y}}$')
axs[0, 1].set_xlabel('time (s)')
axs[0, 1].set_ylabel(r'$a_{y}  \left ( \frac{m}{s^{2}} \right )$')
axs[0, 1].set_title('Acceleration vs. Time')
axs[0, 1].grid()

axs[0, 2].plot(azz, label = r'$a_{z}_{k}$')
axs[0, 2].plot(xhathistory[8, :],'--', label = '$\hat{a_{z}}$')
axs[0, 2].set_xlabel('time (s)')
axs[0, 2].set_ylabel(r'$a_{z}  \left ( \frac{m}{s^{2}} \right )$')
axs[0, 2].set_title('Acceleration vs. Time')
axs[0, 2].grid()

axs[1, 0].plot(vxx, label = r'$v_{x}_{k}$')
axs[1, 0].plot(xhathistory[3, :],'--', label = '$\hat{v_{x}}$')
axs[1, 0].set_xlabel('time (s)')
axs[1, 0].set_ylabel(r'$v_{x}  \left ( \frac{m}{s} \right )$')
axs[1, 0].set_title('Velocity vs. Time')
axs[1, 0].grid()

axs[1, 1].plot(vyy, label = r'$v_{y}_{k}$')
axs[1, 1].plot(xhathistory[4, :],'--', label = '$\hat{v_{y}}$')
axs[1, 1].set_xlabel('time (s)')
axs[1, 1].set_ylabel(r'$v_{y}  \left ( \frac{m}{s} \right )$')
axs[1, 1].set_title('Velocity vs. Time')
axs[1, 1].grid()

axs[1, 2].plot(vzz, label = r'$v_{z}_{k}$')
axs[1, 2].plot(xhathistory[5, :],'--', label = '$\hat{v_{z}}$')
axs[1, 2].set_xlabel('time (s)')
axs[1, 2].set_ylabel(r'$v_{z}  \left ( \frac{m}{s} \right )$')
axs[1, 2].set_title('Velocity vs. Time')
axs[1, 2].grid()

axs[2, 0].plot(xx-xx[0], label = r'$x_{k}$')
axs[2, 0].plot(xhathistory[0, :]-xhathistory[0, 0] ,'--', label = '$\hat{x}$')
axs[2, 0].set_xlabel('time (s)')
axs[2, 0].set_ylabel('x (m)')
axs[2, 0].set_title('Position vs. Time')
axs[2, 0].grid()

axs[2, 1].plot(yy-yy[0], label = r'$y_{k}$')
axs[2, 1].plot(xhathistory[1, :]-xhathistory[1, 0],'--', label = '$\hat{y}$')
axs[2, 1].set_xlabel('time (s)')
axs[2, 1].set_ylabel('y (m)')
axs[2, 1].set_title('Position vs. Time')
axs[2, 1].grid()

axs[2, 2].plot(zz-zz[0])
axs[2, 2].plot(xhathistory[2, :]-xhathistory[2, 0],'--', label = '$\hat{y}$')
axs[2, 2].set_xlabel('time (s)')
axs[2, 2].set_ylabel('z (m)')
axs[2, 2].set_title('Position vs. Time')
axs[2, 2].grid()

#Tight Layout making it easier to stop the overlap in the graphs above
plt.tight_layout()
plt.show()

ax = plt.axes(projection='3d')
ax.plot3D(xx-xx[0], yy-yy[0], zz-zz[0])
ax.plot3D(xhathistory[0, :]-xhathistory[0, 0], xhathistory[1, :]-xhathistory[1, 0], xhathistory[2, :]-xhathistory[2, 0])
ax.set_title('3-D Position data')
ax.set_xlabel('x')
ax.set_ylabel('y')
ax.set_zlabel('z')
plt.show()